{"id":533406,"xmlId":"org.jetbrains.kotlin","name":"Kotlin","description":"<b>Bundled in IntelliJ IDEA.</b> Provides language support for Kotlin, a modern programming language designed to make developers happier.<br>\nGet answers to your questions in the <a href=\"https://slack.kotlinlang.org/\">Public Kotlin Slack</a><br>\nShare your feedback or report your issues in the <a href=\"https://youtrack.jetbrains.com/issues/KT\">Issue tracker</a>.<br>","organization":"JetBrains s.r.o.","tags":["Programming Language"],"version":"232-1.9.24-release-822-IJ10072.27","notes":"\n    <h3>1.9.20</h3>\n    <ul>\n      <li>Kotlin/JVM: support for Java 21 bytecode</li>\n      <li>Kotlin/Native: custom allocator enabled by default, full parallel mark available in the GC, deprecated targets disabled, obligatory opt-in for all cinterop declarations (except for platform libraries), the GC scheduler tracking objects in big chunks, legacy memory manager disabled</li>\n      <li>Kotlin Multiplatform: hierarchy template available by default, full support for Gradle Configuration cache, the default support for third-party cinterop libraries, reworked configuration of compiler settings in multiplatform projects</li>\n      <li>Kotlin/Wasm: support for WASI, new `wasm-wasi` target and rename `wasm` target to `wasm-js`, compatible with recent updates in Wasm GC</li>\n      <li>Kotlin/JS: using open-addressing hash map in the JS stdlib, ability to generate one JS file for each Kotlin source file</li>\n      <li>Libraries: experimental support for `enumEntries()` function, further stabilization of Kotlin/Native standard library</li>\n      <li>Gradle: support for Gradle versions 8.0 and 8.1, new build metrics for Kotlin/Native tasks, support for test fixtures to access internal declarations, new property to configure custom path to Konan and its dependencies</li>\n     </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases\">changelog</a>.\n    <br><br>\n    <h3>1.9.0</h3>\n    <ul>\n      <li>Language: stable `rangeUntil` operator, stable data objects feature, stable `Enum.entries` replacement for `Enum.values()`, stable `@Volatile` annotation</li>\n      <li>K2: JVM promoted to beta, basic support for Kotlin/Native and multiplatform projects, support for Kotlin/JS since 1.8.20</li>\n      <li>Kotlin/JVM: `@JvmDefault` and old `-Xjvm-default` modes deprecated with error, support for Java 20 bytecode</li>\n      <li>Kotlin/Native: new custom memory allocator, no object initialization when accessing `const val`, partial linkage enabled by default</li>\n      <li>Kotlin Multiplatform: new name for the `android` block, new Android source set layout enabled by default, support for Gradle configuration caching in multiplatform libraries, ability to disable sources publication in the Kotlin Multiplatform Gradle plugin, ability to add dependencies between Pods when using the CocoaPods Gradle plugin</li>\n      <li>Kotlin/Wasm: runtime footprint reduced and performance improved, set system default browser as default for `wasmBrowserRun` task, improved JS interop, more compiler and IDE diagnostics for JS interop</li>\n      <li>Kotlin/JS: deprecated legacy backend with error, deprecated external Enum class, extracted DOM API from standard library to module automatically added to builds, partial linkage enabled by default, IR compiler used by default, changed default destination of production distributions, deprecated `kotlin-js` Gradle plugin that is replaced by `kotlin-multiplatform` Gradle plugin, experimental support for ES6 classes and modules, reduced memory consumption for production builds</li>\n      <li>Libraries: stable standard library functions for open-ended ranges, new common function to get regex capture group by name, new `HexFormat` to format and parse hexadecimals, stable time API, new path utility to create parent directories, reviewed and stabilized Kotlin/Native standard library</li>\n      <li>Gradle: build scans show whether K1 or K2 compiler is used, new Gradle property `kotlin.experimental.tryK2` to try the K2 compiler, new project-level compiler options for Kotlin/JVM plugin, removed `KotlinCompile` task’s `classpath` property, exposed `jvmTargetValidationMode` property in `KotlinCompile` task, configurable standalone mode for Kotlin/Native iOS simulator tests, removed support for `org.gradle.api.internal.HasConvention` Gradle element, added `optIn` and `progressiveMode` compiler options, compiler plugins are published separately and Gradle plugins add them as compiler arguments, kapt tasks don’t trigger eager task creation, minimum supported Android Gradle plugin version is 4.2.2</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases\">changelog</a>.\n    <br><br>\n    <h3>1.8.20</h3>\n    <ul>\n      <li>Language: experimental replacement of the Enum class `values()` function with the `entries` property, experimental lifting restrictions on secondary constructor bodies in value (inline) classes, experimental data objects</li>\n      <li>Kotlin/JVM: JVM IR for the kapt stub generation enabled by default</li>\n      <li>Kotlin/Native: bug fix for stack overflow when using regex with large input, improved output for Gradle errors in Xcode, new API for garbage collection statistics, dynamic framework linking without generating C-interop bindings</li>\n      <li>Kotlin Multiplatform: preview support for Gradle composite builds, experimental DSL for the new source set hierarchy</li>\n      <li>Kotlin/Wasm: experimental version of the new Kotlin/Wasm compiler backend</li>\n      <li>Kotlin/JS IR: alpha version of the K2 support, fully-qualified method name in source maps, declarations with non-minified names, the `dukat` integration removed, TypeScript definitions generated only on explicit Gradle action</li>\n      <li>Libraries: experimental support for the `AutoCloseable` interface and the `use()` extension function in the common standard library, experimental support for the Base64 encoding in the standard library, experimental support for the `@Volatile` annotation that works for both JVM and Kotlin/Native</li>\n      <li>Gradle: the new approach to incremental compilation enabled by default, new Gradle plugins alignment platform, compatibility with the Gradle 7.4, 7.5, and 7.6 releases, experimental ability to back up only updated files during incremental compilation, new property for adding a Git branch name to HTTP build reports</li>\n      <li>Maven: new `components.xml` to automatically compile Kotlin Maven projects, ability to set up kapt’s `aptMode`</li>\n      <li>Serialization: prototype of serialization plugin that works with the K2 compiler, prohibited implicit serializer customization via companion object</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.8.20\">changelog</a>.\n    <br><br>\n    <h3>1.8.0</h3>\n    <ul>\n      <li>Kotlin/JVM: removed old backend, the `-Xuse-old-backend` compiler option is no longer supported, support for Java 19 bytecode</li>\n      <li>Kotlin/Native: support for Xcode 14 and `watchosDeviceArm64` target, new `ObjCName`, `HiddenFromObjC` and `ShouldRefineInSwift` annotations to improve Objective-C and Swift interoperability, CocoaPods Gradle plugin dynamically links registered Kotlin frameworks by default</li>\n      <li>Kotlin/JS: stable IR compiler that uses incremental compilation by default, deprecated old backend, support for reporting when `yarn.lock` is updated during the CI process, Gradle plugin supports `kotlin.js.browser.karma.browsers` property to set browser test targets</li>\n      <li>Compiler: Lombok compiler plugin supports the `@Builder` annotation</li>\n      <li>Kotlin Multiplatform: new Android source set layout that can be enabled in Gradle plugin with `kotlin.mpp.androidSourceSetLayoutVersion=2` and includes new naming schema for `KotlinSourceSet` entities, naming change to compilation configurations created by the Kotlin Multiplatform Gradle plugin</li>\n      <li>Gradle: ensured compatibility with Gradle 7.3, disable daemon fallback strategy with `kotlin.daemon.useFallbackStrategy`, exposed available Kotlin compiler options as Gradle lazy properties, minimum supported Gradle version is 6.8.3, minimum supported Android Gradle plugin version is 4.1.3</li>\n      <li>Libraries: stable extensions for `java.util.Optional` in stdlib, stable `toTimeUnit()`, `toDurationUnit`, `cbrt()` functions, JVM target is 1.8 for stdlib, experimental enhancement of `TimeMark` allowing `elapsedNow` to be read from multiple `TimeMark`s simultaneously, added extension functions to `java.nio.file.Path` that can recursively copy or delete directories</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.8.0\">changelog</a>.\n    <br><br>\n    <h3>1.7.20</h3>\n    <ul>\n      <li>K2: support for the `all-open, `no-arg`, SAM-with-receiver, Lombok, Parcelize, AtomicFU, and `jvm-abi-gen` compiler plugins</li>\n      <li>Language: experimental `..&lt;` (`rangeUntil`) operator for ranges with the excluded end bound, deprecated inferring type variables into an empty intersection type, warning on potentially empty intersection types, improved script handling in source roots</li>\n      <li>Language: builder inference in cases with multiple lambdas now requires explicit type arguments; using an uninferred stub type as a receiver in a call during type inference is now forbidden and leads to an error</li>\n      <li>Kotlin/JVM: experimental generic inline classes, more optimized cases of delegated properties</li>\n      <li>Kotlin/Native: the new memory manager enabled by default (with deprecated freezing API and an ability to run Kotlin `suspend` functions on non-main threads from Swift), customizable bundle identifier of the generated framework, improved documentation generated to the Objective-C header</li>\n      <li>Kotlin/JS IR: improved speed on the first build when using the incremental compilation, faster klib generation</li>\n      <li>Libraries: a new experimental interface for ranges with the excluded end bound, new walk and visit extensions for `java.nio.file.Path`</li>\n      <li>Gradle: simplified configuration method for the JVM Toolchain, fixed deprecations and ensured compatibility with Gradle 7.1</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.7.20\">changelog</a>.\n    <br><br>\n    <h3>1.7.0</h3>\n    <ul>\n      <li>New Kotlin K2 compiler for JVM in Alpha</li>\n      <li>Language: changes in builder inference, allowed implementation by delegation to inlined value of inline class, changes in Opt-in annotations</li>\n      <li>Kotlin/JVM: performance improvements, removed `1.6` target version</li>\n      <li>Kotlin/Native: performance improvement for the new memory manager, embeddable compiler jar for Kotlin/Native by default, returning `Void` instead of `KotlinUnit` from `suspend` functions by default, generation of standalone executable for androidNative targets by default, prohibited exceptions through Objective-C bridges</li>\n      <li>Kotlin/JS: performance improvements, smaller bundle size, generated `.js` compatible with old browsers and engines</li>\n      <li>Libraries: extensions for `java.util.Optional` in stdlib, min/max(By/With) functions for non-empty collections, stable `Regex.matchAt()`, `Regex.matchesAt()`, `findAnnotations()`, `DeepRecursiveFunction` functions, getting named groups of a regex match in JS and Native</li>\n      <li>Gradle: Experimental incremental compilation, minimal supported Gradle version is `6.7.1` and Android Gradle plugin is `3.6.4`, allow to override default Kotlin/Native compiler download URL, deprecated `kotlin.compiler.execution.strategy`, removed `useExperimentalAnnotation`, `experimentalAnnotationInUse`, `kotlin.coroutines` (and related `kotlin.experimental.coroutines` Gradle DSL option) properties</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.7.0\">changelog</a>.\n    <br><br>\n    <h3>1.6.20</h3>\n    <ul>\n      <li>Language: prototype of context receivers, definitely non-nullable types</li>\n      <li>Kotlin/JVM: experimental parallel compilation of a single module, callable references to functional interface constructors, improved compatibility for default methods</li>\n      <li>Kotlin/Native: instantiation of annotation classes, improved interop with Swift async/await, better stack traces with libbacktrace, performance improvements</li>\n      <li>Multiplatform: hierarchical project structure by default</li>\n      <li>CocoaPods Gradle plugin: new tasks for generating a suitable podspec for XCFramework publishing, accepting the podspec version when configuring CocoaPods for Kotlin/Native</li>\n      <li>Kotlin/JS: IR compiler improvements (incremental compilation, lazy initialization of top-level properties, separate JS files for project modules), export improvements</li>\n      <li>Security: using relative paths in klibs, persisting yarn.lock for Kotlin/JS Gradle projects, installation of npm dependencies with --ignore-scripts by default</li>\n      <li>Gradle: compiler execution strategies, cleaning up deprecated properties and options</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.6.20\">changelog</a>.\n    <br>\n    For more details, see [What’s New in Kotlin 1.6.20](https://kotlinlang.org/docs/whatsnew1620.html).\n    <br><br>\n    <h3>1.6.20</h3>\n    <ul>\n      <li>Language: prototype of context receivers, definitely non-nullable types</li>\n      <li>Kotlin/JVM: experimental parallel compilation of a single module, callable references to functional interface constructors, improved compatibility for default methods</li>\n      <li>Kotlin/Native: instantiation of annotation classes, improved interop with Swift async/await, better stack traces with libbacktrace, performance improvements</li>\n      <li>Multiplatform: hierarchical project structure by default</li>\n      <li>CocoaPods Gradle plugin: new tasks for generating a suitable podspec for XCFramework publishing, accepting the podspec version when configuring CocoaPods for Kotlin/Native</li>\n      <li>Kotlin/JS: IR compiler improvements (incremental compilation, lazy initialization of top-level properties, separate JS files for project modules), export improvements</li>\n      <li>Security: using relative paths in klibs, persisting yarn.lock for Kotlin/JS Gradle projects, installation of npm dependencies with --ignore-scripts by default</li>\n      <li>Gradle: compiler execution strategies, cleaning up deprecated properties and options</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.6.20\">changelog</a>.\n    <br>\n    For more details, see [What’s New in Kotlin 1.6.20](https://kotlinlang.org/docs/whatsnew1620.html).\n    <br><br>\n    <h3>1.6.0</h3>\n    <ul>\n      <li>Language: stable exhaustive `when` statements for enum, sealed and Boolean subjects, stable conversions from regular to suspending functional types, stable instantiation of annotation classes, improvements to type inference and builder inference</li>\n      <li>Kotlin/JVM: support for repeatable annotations with runtime retention and bytecode optimizations for delegated properties</li>\n      <li>Kotlin/Native: a preview of the new memory manager, support for Xcode 13, updated LLVM to 11.1.0, compiler caches enabled by default for `linuxX64` and `iosArm64`, cross-compilation for MinGW targets, unified compiler plugin ABI with JVM and JS IR backends, reworked unhandled exception handling API</li>\n      <li>Kotlin/JS: ability to disable downloading Node.js and Yarn</li>\n      <li>Gradle: removed 'kotlin.useFallbackCompilerSearch' build option</li>\n      <li>Stdlib: top-level `readln()` and `readlnOrNull()` on JVM, stable `typeOf()`, Duration API, and сollection builders, improvements to the existing API </li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.6.0\">changelog</a>.\n    <br><br>\n\t  <h3>1.5.30</h3>\n    <ul>\n      <li>Kotlin/JVM: instantiation of annotation classes and improvements to how nullability annotations are handled.</li>\n      <li>Kotlin/Native: support for Apple silicon, Kotlin DSL improvements for the Cocoapods Gradle plugin, deprecation of linkage with DLLs without import libraries for MinGW targets, optimized access to object declarations with `const val`s only, and debugger improvements.</li>\n      <li>Swift/Objective-C interop: experimental interoperability with Swift 5.5 async/await and improved singleton mapping.</li>\n      <li>C interop: passing by value for more C structs.</li>\n      <li>Kotlin Multiplatform: the ability to share custom `cinterop` libraries between platforms, XCFrameworks support, and a new default publishing setup for Android artifacts.</li>\n      <li>Kotlin/JS: IR backend in Beta and source map generation for it.</li>\n      <li>Gradle: Java toolchain support and changes to Kotlin daemon JVM argument configuration.</li>\n      <li>Standard library: improvements to the `Regex` and `Duration` APIs.</li>\n      <li>Compiler improvements: changes to the opt-in requirement mechanism, improvements to type inference on recursive generic types, and the elimination of builder inference restrictions.</li>\n    </ul>\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.5.30\">changelog</a> and <a href=\"https://blog.jetbrains.com/kotlin/2021/08/kotlin-1-5-30-released/?utm_source=ide&amp;utm_medium=change-notes&amp;utm_campaign=1-5-30-release\">this blog post</a>.\n    <br><br>\n    <h3>1.5.21</h3>\n    A bug fix release for Kotlin 1.5.20. Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.5.21\">changelog</a>.\n    <br><br>\n    <h3>1.5.20</h3>\n    Released: <b>June 24, 2021</b>\n    <ul>\n      <li>String concatenation uses invokedynamic on JVM by default.</li>\n      <li>Annotations on function type parameters are emitted to the bytecode on JVM 1.8+.</li>\n      <li>Support calling Lombok-generated Java methods from Kotlin code in the same module.</li>\n      <li>Kotlin/Native: improved performance of `Array.copyInto` inside one array.</li>\n      <li>Kotlin/Native: opt-in export of KDoc comments to the generated Objective-C headers with the `-Xexport-kdoc` compiler option.</li>\n      <li>Experimental caching of annotation processors' classloaders.</li>\n      <li>Parallel compilation of Kotlin sources is controlled by `--parallel` Gradle property. The `kotlin.parallel.tasks.in.project` property is deprecated.</li>\n      <li>Aligned behavior of stdlib functions `isLowerCase`/`isUpperCase` and `digitToInt` across platforms.</li>\n    </ul>\n    For more details, see <a href=\"https://kotlinlang.org/docs/whatsnew1520.html?utm_source=ide&amp;utm_medium=change-notes&amp;utm_campaign=1-5-20-release\">What’s New in Kotlin 1.5.20</a> and <a href=\"https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/?utm_source=ide&amp;utm_medium=change-notes&amp;utm_campaign=1-5-20-release\">this blog post</a>\n    <br><br>\n    <h3>1.5.10</h3>\n    Released: <b>May 24, 2021</b>\n    <br>\n    A bug fix release for Kotlin 1.5.0.\n    Learn more in the <a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.5.10/\">changelog</a>.\n    <br><br>\n    <h3>1.5.0</h3>\n    Released: <b>May 5, 2021</b>\n    <ul>\n      <li><a href=\"https://kotlinlang.org/docs/whatsnew14.html?utm_source=product&amp;utm_medium=link#new-jvm-ir-backend\">JVM IR backend</a> by default.</li>\n      <li>New language features by default: inline value classes, sealed interfaces, and JVM records support.</li>\n      <li>New default JVM target: 1.8 (1.6 is deprecated)</li>\n      <li><a href=\"https://kotlinlang.org/docs/fun-interfaces.html?utm_source=product&amp;utm_medium=link\">SAM adapters</a> use invokedynamic on JVM by default. Lambdas can use invokedynamic with an opt-in via `-Xlambdas=indy`.</li>\n      <li>Deprecation of `-Xjvm-default=enable` and `-Xjvm-default=compatibility` compiler modes and `@JvmDefault` annotation.</li>\n      <li>Kotlin/Native compilation time improvements.</li>\n      <li>Kotlin/JS uses webpack 5 by default.</li>\n      <li>New stdlib APIs: math functions `floorDiv()` and `mod()`, collection function `firstNotNullOf()`, strict version of `String.toBoolean()`.</li>\n      <li>Stabilization of experimental APIs: unsigned integers, extensions for Java NIO Path API, Char-to-int and Char-to-code conversions, locale-agnostic functions for upper-/lowercasing.</li>\n      <li>Changes in the experimental Duration API.</li>\n      <li>Simplified kotlin-test dependency usage.</li>\n      <li>New and updated assertion functions in kotlin-test.</li>\n      <li>New library versions: coroutines 1.5.0, serialization 1.2.0, dateTime 0.2.0</li>\n      <li>Fixed compiler exceptions.</li>\n    </ul>\n    Learn more in:\n    <ul>\n      <li><a href=\"https://kotlinlang.org/docs/whatsnew15.html?utm_source=product&amp;utm_medium=link\">What’s New in Kotlin 1.5.0</a>.</li>\n      <li><a href=\"https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-released/?utm_source=product&amp;utm_medium=link\">the release blog post</a>.</li>\n      <li><a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.5.0/\">the release changelog</a>.</li>\n    </ul>\n    <br><br>\n    <h3>1.4.30</h3>\n    Released: <b>February 4, 2021</b>\n    <ul>\n      <li>Preview of new language features: JVM records support, sealed interfaces, and stable inline classes.</li>\n      <li>Kotlin/JVM: IR backend is now in Beta.</li>\n      <li>Kotlin/Native: performance improvements, new `watchosX64` simulator target, support for Xcode 12.2 libraries.</li>\n      <li>Kotlin/JS: prototype lazy initialization of top-level properties.</li>\n      <li>Support for Gradle configuration cache.</li>\n      <li>Standard library API improvements: locale-agnostic API for upper/lowercasing text and clear Char-to-code and Char-to-digit conversions.</li>\n    </ul>\n    For more details, see <a href=\"https://kotlinlang.org/docs/reference/whatsnew1430.html?utm_source=product&amp;utm_medium=link\">What’s New in Kotlin 1.4.30</a> and <a href=\"http://blog.jetbrains.com/kotlin/2021/01/1-4-30-is-released-with-a-new-jvm-backend-and-language-and-multiplatform-features/?utm_source=product&amp;utm_medium=link\">this blog post</a>.\n    <br><br>\n    <h3>1.4.20</h3>\n    Released: <b>November 23, 2020</b>\n    <ul>\n      <li>Kotlin/JS: New project templates, improved Gradle plugin, experimental <b>compilation with errors mode</b> in the IR compiler.</li>\n      <li>Kotlin/Native: New escape analysis mechanism, wrapping of Objective-C exceptions, various functional and performance improvements.</li>\n      <li>IDE: Experimental support for <a href=\"https://blog.jetbrains.com/idea/2020/03/intellij-idea-2020-1-beta2/\">Code Vision</a>, the <b>Redirect input from</b> option in Kotlin run configurations, and more.</li>\n      <li>JEP 280 (invokedynamic) string concatenation is available on the JVM.</li>\n      <li>Changes to the layout of multiplatform projects.</li>\n      <li>Improved CocoaPods support.</li>\n      <li>Standard library improvements: Extensions for java.nio.file.Path and performance optimizations.</li>\n      <li>Deprecation of the kotlin-android-extensions compiler plugin. Parcelable implementation generator has moved to the new kotlin-parcelize plugin.</li>\n    </ul>\n    For more details, see <a href=\"https://kotlinlang.org/docs/reference/whatsnew1420.html?utm_source=product&amp;utm_medium=link\">What’s New in Kotlin 1.4.20</a> and <a href=\"https://blog.jetbrains.com/kotlin/2020/11/kotlin-1-4-20-released/?utm_source=product&amp;utm_medium=link\">this blog post</a>.\n    <br><br>\n    <h3>1.4.0</h3>\n    Released: <b>August 17, 2020</b>\n    <ul>\n      <li>New compiler with better type inference.</li>\n      <li>IR backends for JVM and JS in Alpha mode (<a href=\"https://kotlinlang.org/docs/reference/whatsnew14.html#unified-backends-and-extensibility\">requires opt-in</a>).</li>\n      <li>A new flexible Kotlin Project Wizard for easy creation and configuration of different types of projects.</li>\n      <li>New IDE functionality to debug coroutines.</li>\n      <li>IDE performance improvements: many actions, such as project opening and autocomplete suggestions now complete up to 4 times faster.</li>\n      <li>New language features such as SAM conversions, trailing comma, and other.</li>\n      <li>Type annotations in the JVM bytecode and new modes for generating default interfaces in Kotlin/JVM.</li>\n      <li>New Gradle DSL for Kotlin/JS.</li>\n      <li>Improved performance and interop with Swift and Objective-C in Kotlin/Native.</li>\n      <li>Support for sharing code in several targets thanks to the hierarchical structure in multiplatform projects.</li>\n      <li>New collection operators, delegated properties improvements, the double-ended queue implementation ArrayDeque, and much more new things in the standard library.</li>\n    </ul>\n    For more details, see <a href=\"https://kotlinlang.org/docs/reference/whatsnew14.html?utm_source=product&amp;utm_medium=link\">What’s New in Kotlin 1.4.0</a> and <a href=\"http://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/?utm_source=product&amp;utm_medium=link\">this blog post</a>.\n    <br><br>\n    To get the most out of the changes and improvements introduced in Kotlin 1.4, join our <a href=\"https://kotlinlang.org/lp/event-14/\">Online Event</a> where you will be able to enjoy four days of Kotlin talks, Q&amp;As with the Kotlin team, and more.\n    \n  ","dependencies":["com.intellij.java"],"optionalDependencies":["com.jetbrains.performancePlugin","JavaScriptDebugger","NodeJS","kotlin.gradle.gradle-tooling","kotlin.gradle.gradle","kotlin.gradle.gradle-java","com.intellij.modules.cidr.debugger","com.intellij.gradle","com.intellij.nativeDebug","kotlin-ultimate.common-native","com.intellij.LineProfiler","kotlin.base.analysis-api-providers","kotlin.project-wizard.idea","kotlin.gradle.code-insight-common","org.intellij.groovy","org.jetbrains.plugins.gradle","org.jetbrains.idea.maven","com.intellij.properties","org.jetbrains.java.decompiler","org.jetbrains.debugger.streams","JUnit","TestNG-J","Coverage","com.intellij.java-i18n","Git4Idea","tanvd.grazi","com.intellij.completion.ml.ranking","kotlin.maven","kotlin.compiler-plugins.compiler-plugin-support.gradle","kotlin.compiler-plugins.compiler-plugin-support.maven","training","kotlin.code-insight.inspections-shared","kotlin.code-insight.intentions-shared","com.intellij.copyright","org.intellij.intelliLang","kotlin.code-insight.live-templates-shared","kotlin.code-insight.live-templates-k1","com.intellij.modules.structuralsearch"],"since":"232.10072.27","until":"232.*","size":163762295,"url":"https://kotlinlang.org","vendor":"JetBrains","sourceCodeUrl":"https://github.com/JetBrains/intellij-community/tree/master/plugins/kotlin"}